input {
    beats{
     port=>5044
     }


    }

filter {
    if [type] == "mysql_slow" {
     grok {
             match =>["message","(?m)^# User@Host: %{USER:user}\[[^\]]+\] @ (?:(?<clienthost>\S*) )?\[(?:%{IP:clientip})?\]\s*Id:\s+%{NUMBER:id:int}\s+# Query_time: %{NUMBER:query_time:float}\s+Lock_time: %{NUMBER:lock_time:float}\s+Rows_sent: %{NUMBER:rows_sent:int}\s+Rows_examined: %{NUMBER:rows_examined:int}\s*(?:use %{DATA:database};\s*)?SET timestamp=%{NUMBER:timestamp};\s*(?<query>(?<action>\w+)\s+.*)\n# Time:.*$"  ]  
           }
        if"_grokparsefailure" in [tags]{ 
                 drop{}
            }
       date {
          match => [ "timestamp", "UNIX" ]
          remove_field => [ "timestamp" ]
        }
    }
   

    if [type] == "mysql_error" {
        grok {
            match => { "message" => "(?:(?<time>\d{6}\s+\d+:\d+:\d+)\s+(?:\[(?<loglevel>\w+)\]\s+|)|)(?<errmsg>.*)" }
        }
        if"_grokparsefailure" in [tags]{ 
                 drop{}
            }
        date {
            match => [ "time", "yyMMdd HH:mm:ss", "yyMMdd  H:mm:ss" ]
        }
    }

    if [type] == "call"{
     grok {
             match =>["message","(?m)%{TIMESTAMP_ISO8601:timestamp}\s+\[%{DATA:level}\]\s+\{\"className\":\"%{DATA:className}\",\"methodName\":\"%{DATA:methodName}\",\"params\":%{GREEDYDATA:params},\"requester\":\"%{DATA:requesterip}\",\"timeConsume\":%{NUMBER:timeConsume:float},\"status\":%{NUMBER:status:float}\}" ]  
           }
        if"_grokparsefailure" in [tags]{ 
                 drop{}
            }

    date {
         match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
        }
     }

    if [type] == "cpu" {
     grok {
             match =>["message","(?m)%{TIMESTAMP_ISO8601:timestamp}\s+\[%{DATA:level}\]\s+\{\"timeStamp\":\"%{DATA:time}\",\"rate\":%{NUMBER:CPUrate:float}\}"  ]  
           }
        if"_grokparsefailure" in [tags]{ 
                 drop{}
            }
    date {
         match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
        }
    }

    if [type] == "disk" {
     grok {
             match =>["message","(?m)%{TIMESTAMP_ISO8601:timestamp}\s+\[%{DATA:level}\]\s+\{\"timeStamp\":\"%{DATA:time}\",\"total\":\"%{NUMBER:disktotal:float}\",\"used\":\"%{NUMBER:diskused:float}\",\"free\":\"%{NUMBER:diskfree:float}\"\}"  ]  
      
           }
        if"_grokparsefailure" in [tags]{ 
                 drop{}
            }
    date {
         match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
        }
    }


    if [type] == "io" {
     grok {
             match =>["message","(?m)%{TIMESTAMP_ISO8601:timestamp}\s+\[%{DATA:level}\]\s+\{\"timeStamp\":\"%{DATA:time}\",\"readRate\":%{NUMBER:IOread:float},\"writeRate\":%{NUMBER:IOwrite:float}\}"  ]  
       
             }
        if"_grokparsefailure" in [tags]{ 
                 drop{}
            }
    date {
         match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
        }
    }

    if [type] == "jvm" {
     grok {
             match =>["message","(?m)%{TIMESTAMP_ISO8601:timestamp}\s+\[%{DATA:level}\]\s+\{\"timeStamp\":\"%{DATA:time}\",\"total\":\"%{NUMBER:jvmtotal:float}\",\"used\":\"%{NUMBER:jvmused:float}\",\"free\":\"%{NUMBER:jvmfree:float}\"\}"  ]  
           }
        if"_grokparsefailure" in [tags]{ 
                 drop{}
            }
    date {
         match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
        }
    }

    if [type] == "mem" {
     grok {
             match =>["message","(?m)%{TIMESTAMP_ISO8601:timestamp}\s+\[%{DATA:level}\]\s+\{\"timeStamp\":\"%{DATA:time}\",\"total\":\"%{NUMBER:memtotal:float}\",\"used\":\"%{NUMBER:memused:float}\",\"free\":\"%{NUMBER:memfree:float}\"\}"  ]  
           }
        if"_grokparsefailure" in [tags]{ 
                 drop{}
            }
 
    date {
         match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
        }
    }

    if [type] == "net" {
     grok {
             match =>["message","(?m)%{TIMESTAMP_ISO8601:timestamp}\s+\[%{DATA:level}\]\s+\{\"timeStamp\":\"%{DATA:time}\",\"sendRate\":%{NUMBER:NETsendRate:float},\"rcvdRate\":%{NUMBER:NETrcvdRate:float}\}"  ]  
       
             }
        if"_grokparsefailure" in [tags]{ 
                 drop{}
            }
    date {
         match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
        }


    }
   if[type]=="system"{
        grok{
           match=>{ "message" => "(?m)%{DATA:timestamp}\s+\[%{DATA:level}\] %{GREEDYDATA:log_json}"  
              }
         }
      json {
        source => "log_json"
        remove_field=>["log_json"]
        }
        if"_grokparsefailure" in [tags]{ 
                 drop{}
            }

     date {
         match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
        }
    }

         
     }

output {
  if [type] == "mysql_slow"{
     elasticsearch {
         host => "0.0.0.0"
         protocol=>"http"
         index => "logstash-%{type}-%{+yyyy.MM.dd}"   #logstash-* to find
      }
   }
  if [type] == "mysql_error"{
     elasticsearch {
         host => "0.0.0.0"
         protocol=>"http"
         index => "logstash-%{type}-%{+yyyy.MM.dd}"   #logstash-* to find
      }
   }
  if [type] == "call"{
     elasticsearch {
         host => "0.0.0.0"
         protocol=>"http"
         index => "logstash-%{type}-%{+yyyy.MM.dd}"   #logstash-* to find
      }
   }
  if [type] == "cpu"{
     elasticsearch {
         host => "0.0.0.0"
         protocol=>"http"
         index => "logstash-%{type}-%{+yyyy.MM.dd}"   #logstash-* to find
      }
   }
  if [type] == "disk"{
     elasticsearch {
         host => "0.0.0.0"
         protocol=>"http"
         index => "logstash-%{type}-%{+yyyy.MM.dd}"   #logstash-* to find
      }
   }
  if [type] == "io"{
     elasticsearch {
         host => "0.0.0.0"
         protocol=>"http"
         index => "logstash-%{type}-%{+yyyy.MM.dd}"   #logstash-* to find
      }
   }
  if [type] == "jvm"{
     elasticsearch {
         host => "0.0.0.0"
         protocol=>"http"
         index => "logstash-%{type}-%{+yyyy.MM.dd}"   #logstash-* to find
      }
   }
  if [type] == "mem"{
     elasticsearch {
         host => "0.0.0.0"
         protocol=>"http"
         index => "logstash-%{type}-%{+yyyy.MM.dd}"   #logstash-* to find
      }
   }
  if [type] == "system"{
     elasticsearch {
         host => "0.0.0.0"
         protocol=>"http"
         index => "logstash-%{type}-%{+yyyy.MM.dd}"   #logstash-* to find
      }
   }
  if [type] == "net"{
     elasticsearch {
         host => "0.0.0.0"
         protocol=>"http"
         index => "logstash-%{type}-%{+yyyy.MM.dd}"   #logstash-* to find
      }
   }


    }
